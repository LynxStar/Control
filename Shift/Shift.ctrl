form source
	: data
	| library
	;

form data : DATA identifier OPENSBRACKET (field)* CLOSESBRACKET;

form library : LIBRARY identifier OPENSBRACKET (method)* CLOSESBRACKET;

form method : signature block;

form signature : typeDef OPENPARENS (parameters)? CLOESPARENS;

form parameters : parameter (COMMA parameter)*;

form parameter : typeDef;

form block : OPENSBRACKET (statement SEMICOLON)* CLOSESBRACKET;

form statement 
	: declaration		
	| assignment
	| return_expression
	| call
	;

form declaration : type identifier (initializer)?;

form initializer : ASSIGNMENT expression;

form return_expression : RETURN expression;

form expression 
	: unary_expression
	;


form assignment
	: accessor ASSIGNMENT expression
	;

form accessor : identifier (DOT identifier)*;

form unary_expression
	: primary_expression
	;

form primary_expression
	: parens_expression
	| literal
	| chain
	;

form parens_expression : OPENPARENS (expression)? CLOESPARENS;

form call : expression invocation;

form chain : chain_part (DOT chain_part)*;

form chain_part
	: invocation
	| identifier
	| literal
	;

form invocation : OPENPARENS (arguments)? CLOESPARENS;

form arguments : argument (COMMA argument)*;

form argument : expression;
	
form literal
	: boolean
	| string
	| INTEGER
	;
	
form boolean
	: TRUE
	| FALSE
	;

form string : STRING;

form field : typeDef SEMICOLON;

form typeDef : type identifier;

form type : IDENTIFIER;
form identifier : IDENTIFIER;

discard COMMENT : `\/\/.*?((?=\n)|(?=\r\n))`;

token STRING : `(["'])(?:(?=(\\?))\2.)*?\1`;

token DATA : 'data' WHITESPACE;
token LIBRARY : 'library' WHITESPACE;

token RETURN : 'return';

token OPENSBRACKET : '{';
token CLOSESBRACKET : '}';
token OPENPARENS : '(';
token CLOESPARENS : ')';

token DOT : '.';
token SEMICOLON : ';';
token COMMA : ',';

token ASSIGNMENT : '=';

token TRUE : 'true';
token FALSE : 'false';

token IDENTIFIER : LETTER (LETTER_OR_DIGIT)*;

token INTEGER : (DIGIT)+;

fragment LETTER     : `[a-zA-Z]` ;
fragment DIGIT      : `[0-9]` ;
fragment DOUBLEQUOTE : '"';

fragment LETTER_OR_DIGIT
	: LETTER 
	| DIGIT
	;

discard WHITESPACE 
	: `[ \t\n\r]+`
    ;
