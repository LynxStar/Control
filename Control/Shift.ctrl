rule source
	: structure
	| library
	| service
	;

rule structure : STRUCTURE identifier OPENSBRACKET field* CLOSESBRACKET;

rule library : LIBRARY identifier OPENSBRACKET method* CLOSESBRACKET;

rule method : methodSignature block;

rule methodSignature : type identifier parameters;

rule parameters : OPENPARENS parameter*&COMMA CLOESPARENS;

rule parameter : type identifier;

rule block : OPENSBRACKET statement* CLOSESBRACKET;

rule statement : command SEMICOLON;

rule command
	: typeDef
	| assignment
	| expression
	| return
	;

rule return : RETURN expression;

rule expression
	: parensExpression
	| binaryExpression
	| value
	;

rule assignment : assignable ASSIGNMENT expression;

rule assignable 
	: reference
	| typeDef
	;

rule reference 
	: identifier
	;

rule value
	: reference
	| constant
	;

rule parensExpression : OPENPARENS expression CLOESPARENS;

rule binaryExpression : expression binaryOperator expression;

rule binaryOperator 
	: EQUALITY
	| INEQUALITY
	| GREATERTHAN
	| LESSTHAN
	| GREATERTHANOREQUALTO
	| LESSTHANOREQUALTO
	| AND
	| OR
	| NOT
	;

rule field : typeDef SEMICOLON;

rule typeDef : type identifier;

rule type : IDENTIFIER;
rule identifier : IDENTIFIER;

rule constant
    : STRING
    | NUMBER
    ;

token STRUCTURE : 'structure';
token LIBRARY : 'library';
token SERVICE : 'service';
token EFFECT : 'effect';

token RETURN : 'return';

token OPENSBRACKET : '{';
token CLOSESBRACKET : '}';
token OPENPARENS : '(';
token CLOESPARENS : ')';

token SEMICOLON : ';';
token COMMA : ',';

token ASSIGNMENT : '=';

token EQUALITY : '==';
token INEQUALITY : '==';
token GREATERTHAN : '>';
token LESSTHAN : '<';
token GREATERTHANOREQUALTO : '>=';
token LESSTHANOREQUALTO : '<=';
token AND : '&&';
token OR : '||';
token NOT : '!';

token SUCHTHAT : '=>';

token STRING
   : DOUBLEQUOTE (ESC | SAFECODEPOINT)* DOUBLEQUOTE
   ;

token NUMBER 
    : WHOLENUMBER 
    ;
token WHOLENUMBER : DIGIT+;

token WHITESPACE 
	: [ \t\n\r]+
    ;

token IDENTIFIER: LETTER (LETTER | DIGIT)*;

fragment LETTER     : [a-zA-Z] ;
fragment DIGIT      : [0-9] ;
fragment DOUBLEQUOTE : '"';

fragment ESC
   : '\\' (["\\/bfnrt] | UNICODE)
   ;
fragment UNICODE
   : 'u' HEX HEX HEX HEX
   ;
fragment HEX
   : [0-9a-fA-F]
   ;