form source
	: structure
	| library
	| service
	;

form structure : STRUCTURE identifier OPENSBRACKET field* CLOSESBRACKET;

form library : LIBRARY identifier OPENSBRACKET method* CLOSESBRACKET;

form service : SERVICE identifier OPENSBRACKET method* CLOSESBRACKET;

form method : methodSignature block;

form methodSignature : type identifier parameters;

form parameters : OPENPARENS parameter*&COMMA CLOESPARENS;
form parameters : OPENPARENS parameter (COMMA OPENPARENS parameter)*

form parameter : type identifier;

form block : OPENSBRACKET statement* CLOSESBRACKET;

form statement : command SEMICOLON;

form command
	: typeDef
	| assignment
	| expression
	| return
	;

form return : RETURN expression;

form expression
	: parensExpression
	| binaryExpression
	| value
	;

form assignment : assignable ASSIGNMENT expression;

form assignable 
	: reference
	| typeDef
	;

form reference 
	: identifier
	;

form value
	: reference
	| constant
	;

form parensExpression : OPENPARENS expression CLOESPARENS;

form binaryExpression : expression binaryOperator expression;

form binaryOperator 
	: EQUALITY
	| INEQUALITY
	| GREATERTHAN
	| LESSTHAN
	| GREATERTHANOREQUALTO
	| LESSTHANOREQUALTO
	| AND
	| OR
	| NOT
	;

form field : typeDef SEMICOLON;

form typeDef : type identifier;

form type : IDENTIFIER;
form identifier : IDENTIFIER;

form constant
    : STRING
    | NUMBER
    ;

token STRUCTURE : 'structure';
token LIBRARY : 'library';
token SERVICE : 'service';
token EFFECT : 'effect';

token RETURN : 'return';

token OPENSBRACKET : '{';
token CLOSESBRACKET : '}';
token OPENPARENS : '(';
token CLOESPARENS : ')';

token SEMICOLON : ';';
token COMMA : ',';

token ASSIGNMENT : '=';

token EQUALITY : '==';
token INEQUALITY : '!=';
token GREATERTHAN : '>';
token LESSTHAN : '<';
token GREATERTHANOREQUALTO : '>=';
token LESSTHANOREQUALTO : '<=';
token AND : '&&';
token OR : '||';
token NOT : '!';

token SUCHTHAT : '=>';

token STRING
   : `(["'])(?:(?=(\\?))\2.)*?\1`
   ;
	
token WHOLENUMBER : DIGIT+;

noop COMMENT : `\/\/.*?((?=\n)|(?=\r\n))`;

token IDENTIFIER : LETTER LETTER_OR_DIGIT*;

noop WHITESPACE 
	: `[ \t\n\r]+`
    ;

fragment LETTER     : `[a-zA-Z]` ;
fragment DIGIT      : `[0-9]` ;
fragment DOUBLEQUOTE : '"';

fragment LETTER_OR_DIGIT
	: LETTER 
	| DIGIT
	;

fragment ESC_OR_SAFE
	: ESC 
	| SAFECODEPOINT
	;

fragment ESC
   : `\` DOUBLEQUOTE
   ;

fragment SAFECODEPOINT
   : `[^` DOUBLEQUOTE `]`
   ;